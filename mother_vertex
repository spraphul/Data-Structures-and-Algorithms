#include<bits/stdc++.h>
using namespace std;

class graph
{
	int v;
	list<int >* adj;
	void DFSUtil(int v, bool visited[v]);
public:
     graph(int v);
     void addedge(int u, int v);
     void findmother(int v);
}

graph::graph(int v)
{
	this-> v=v;
	adj = new list<int>[v];
}

graph::addedge(int u, int v)
{
	adj[u].push_back(v);
	adj[v].push_back(u);
}

graph::DFSUtil(int v, bool visited[v])
{
      visited[v]=true;
      list<int>::iterator i;
      for(i=adj[v].begin();i!=adj[v].end();i++)
      {
      	if(visited[*i]!=true)
      	{
      		DFSUtil(*i,visited);
      	}
      }
	
}

graph::findmother(int v)
{
	bool visited[v];
	for(int i=0;i<v;i++)
	{
		visited[i]=false;
	}
	int m=0;
	for(int i=0;i<v;i++)
	{
		if(visited[i]==false)
		{
			DFSUtil(i,visited)
		}
		m=i;
	}
	
	for(int i=0;i<v;i++)
	{
		visited[i]=false;
	}
	
	DFSUtil(m,visited);
	
	for(int i=0;i<v;i++)
	{
		if(visited[i]!=true)
	    {
	    	cout<<"NOT POSSIBLE";
	    	break;
	    	return;
	    }
	}
	
	cout <<"Mother vertex is :"<< m;
	return;
	
	
}
